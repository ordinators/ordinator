# Ordinator Development Rules

## Core Principle
**ALWAYS reference PRD.md when making any changes to this project.** The Product Requirements Document (PRD.md) contains the definitive specification for Ordinator's features, design decisions, and technical requirements.

## Testing Requirements
**ALWAYS reference TEST_PLAN.md when creating tests.** The Test Plan (TEST_PLAN.md) contains the comprehensive testing strategy, including test types, tools, and security considerations.

## Before Making Changes
1. **Read PRD.md first** - Understand the complete project requirements
2. **Check the relevant section** - Ensure your changes align with the specified features
3. **Follow the design decisions** - Respect the resolved questions and technical architecture
4. **Maintain consistency** - Ensure changes don't conflict with established patterns

## Before Creating Tests
1. **Read TEST_PLAN.md first** - Understand the testing strategy and requirements
2. **Choose appropriate test type** - Unit, Integration, CLI, Property-based, or Security/Fuzz testing
3. **Use specified tools** - Follow the recommended testing frameworks and libraries
4. **Consider security implications** - Ensure secrets are handled safely and system commands are not executed
5. **Use sandboxed environments** - Always test in temporary directories with proper cleanup

## Pre-PR CI Validation Rule
**ALWAYS run GitHub Actions workflows locally before creating any PR.** This prevents CI failures and reduces back-and-forth with GitHub.

### Required Local CI Steps:
1. **Format Check**: `cargo fmt --check`
2. **Linting**: `cargo clippy --all-targets --all-features -- -D warnings`
3. **Tests**: `cargo test --all-targets --all-features`
4. **Build Check**: `cargo build --release`
5. **Documentation**: `cargo doc --no-deps`

### Local CI Command:
```bash
cargo fmt --check && cargo clippy --all-targets --all-features -- -D warnings && cargo test --all-targets --all-features && cargo build --release && cargo doc --no-deps
```

### When to Run:
- Before creating any feature branch PR
- Before merging any changes to main/master
- After any significant code changes
- When preparing for release

### Failure Handling:
- **NEVER create a PR if local CI fails**
- Fix all issues locally first
- Re-run the full CI suite after fixes
- Only proceed when all checks pass locally

## Key Requirements to Follow
- **Secrets Management**: Use Mozilla SOPS + age encryption, per-file handling
- **System Commands**: Never execute sudo commands directly - generate scripts instead
- **Dry-Run Mode**: Implement `--dry-run` for all applicable commands
- **Profile Support**: Support multiple environment profiles (work, personal, laptop)
- **Git Integration**: Use Git-inspired CLI commands without explicit git invocation
- **macOS Focus**: Optimize for macOS while maintaining cross-platform compatibility
- **Security First**: Never expose plaintext secrets unexpectedly

## Testing Requirements to Follow
- **Unit Tests**: Use Rust's built-in `#[test]` framework for internal functions
- **Integration Tests**: Use `tempfile`, `assert_fs` for multi-component workflows
- **CLI Tests**: Use `assert_cmd`, `predicates` for full command-line flows
- **Property-Based Tests**: Use `proptest`, `quickcheck` for edge case resilience
- **Security Tests**: Use `cargo-fuzz` for memory safety and secret leakage prevention
- **Sandboxed Testing**: Always use temporary directories and proper cleanup
- **Mock External Dependencies**: Mock Git, SOPS, and file system operations

## Code Style & Architecture
- Write in Rust with safety and performance in mind
- Use the established module structure (cli, config, git, secrets, bootstrap, utils)
- Follow the CLI patterns established in the PRD
- Implement proper error handling and logging
- Maintain the TOML configuration approach

## When in Doubt
- **Refer to PRD.md** - It contains the authoritative answers
- **Refer to TEST_PLAN.md** - It contains the testing strategy and requirements
- **Check the resolved questions table** - Many design decisions are documented there
- **Follow the technical architecture** - Use the specified technologies and patterns
- **Prioritize security and user trust** - This is a core principle of the project

## Testing Quality Gates
- All tests must pass before merging
- Code coverage should be > 80% via `cargo tarpaulin`
- No clippy warnings
- Security tests must pass (no secret leakage, no unauthorized sudo execution)
- Integration tests must run in clean, isolated environments

Remember: The PRD.md is the source of truth for this project, and TEST_PLAN.md is the source of truth for testing. Any deviation from either should be carefully considered and documented.

# Homebrew Formula Release Rule
- Homebrew formula files (ordinator.rb) must ONLY be created, updated, or deleted in the homebrew-ordinator/Formula directory.
- The main ordinator project must NEVER contain a Formula directory or ordinator.rb file.
- All release automation and formula SHA updates must be performed in the homebrew-ordinator tap repository, not in the main ordinator repo.

# Development Roadmap Tracking Rule
- **ALWAYS update DEVELOPMENT_ROADMAP.md when features are completed**
- When you detect that a task or feature in the roadmap has been implemented and tested, mark it as complete by changing `[ ]` to `[x]`
- This includes both the **Tasks** and **Tests** sections for each phase
- Update the roadmap immediately after completing implementation and testing
- The roadmap serves as the progress tracking document, not the PRD

# Ordinator Test Isolation Rule
- All integration and CLI tests must set the ORDINATOR_HOME environment variable to a temporary directory to ensure test isolation. This prevents tests from modifying the real home directory or user files.

# Pull Request Formatting Rule
All PRs must follow this structure:
- **Changes Made:** List all major features, refactors, and fixes.
- **Testing:** List test types, counts, and any special test isolation or edge cases.
- **Coverage:** List per-module and overall coverage, and note improvements.
- **Completion Statement:** End with "This completes the [phase/feature] and prepares for [next phase/feature]."
